--연습계정

select * FROM TAB;

SELECT * FROM CUSTOM;

SELECT USERID,USERNAME,ADDR1,SUBSTR(JUMIN,1,6) BIRTH FROM CUSTOM WHERE ADDR1 = '서울특별시';

SELECT USERID,USERNAME,ADDR1,SUBSTR(JUMIN,1,6) BIRTH FROM CUSTOM WHERE ADDR1 LIKE '경기%';


SELECT * FROM CUSTOM; --고객정보
SELECT * FROM COMPANY; -- 회사정보
SELECT * FROM POINT; --포인트
SELECT * FROM PRODUCT; --판매제품
SELECT * FROM RESEARCH; --설문조사
SELECT * FROM SALES; --판매내역

SELECT * FROM CUSTOM;
SELECT CONCAT(SUBSTR(JUMIN,1,8),'******') JUMIN FROM CUSTOM;
SELECT RPAD(SUBSTR(JUMIN,1,8),14,'*') JUMIN FROM CUSTOM;
SELECT RPAD(JUMIN,8) JUMIN FROM CUSTOM;


SELECT * FROM COMPANY;
SELECT SUM(PAY) FROM COMPANY WHERE POSIT = '이사';

SELECT * FROM CUSTOM;

SELECT ADDR1,COUNT(*) CNT FROM CUSTOM GROUP BY ADDR1 HAVING CNT > 100; --X , HAVING은 별칭 사용 불가

SELECT ADDR1,COUNT(*) CNT FROM CUSTOM GROUP BY ADDR1 HAVING COUNT(*) > 30; --O

SELECT JOB,COUNT(*) CNT, SUM(POINT) P_SUM FROM CUSTOM GROUP BY JOB HAVING SUM(POINT) > 10000;

SELECT * FROM COMPANY;
SELECT DEPT, SUM(PAY) PSUM FROM COMPANY GROUP BY DEPT;

SELECT * FROM SALES;
SELECT USERID,COUNT(*) CNT, SUM(PRICE) PSUM FROM SALES GROUP BY USERID HAVING COUNT(*) >= 5;

SELECT * FROM CUSTOM;
SELECT 
CASE SEX 
WHEN '1' THEN '남자' 
WHEN '0' THEN '여자' 
END 성별,
COUNT(*) CNT, SUM(POINT) SPOINT FROM CUSTOM GROUP BY SEX; --CASE ~ WHEN ~ THEN : SELECT할때 값을 바꿔서 보여줌

--------------------------------------------------------------------------------------------

--JOIN : 두개 이상의 테이블에서 연관된 데이터를 한번에 출력
--EQUI JOIN(INNER JOIN)
--NON EQUI JOIN 
--OUTER JOIN 
--SELF JOIN 
--CROSS JOIN 

SELECT * FROM CUSTOM WHERE USERID = 'gg5595';
SELECT * FROM COMPANY WHERE USERID = 'gg5595';


-- INNER JOIN (교집합된 부분만 가져올수 있음)

--USERID 기준으로 CUSTOM, COMPANY 합침 = EQUI JOIN(INNER JOIN)

--TRANSACTION SQL
--테이블 별칭 쓰면 다 별칭으로 써야댐, AS쓰면 오류
SELECT A.USERID,USERNAME,JUMIN,ADDR1,JOB,
B.USERID,COMPANY,DEPT,POSIT,PAY 
FROM CUSTOM A,COMPANY B 
WHERE A.USERID = B.USERID;


--ANSI SQL
--JOIN문의 조건문은 ON
SELECT A.USERID,USERNAME,JUMIN,ADDR1,JOB,
B.USERID,COMPANY,DEPT,POSIT,PAY 
FROM CUSTOM A INNER JOIN COMPANY B 
ON A.USERID = B.USERID;

-----------------------------------------

--OUTER JOIN(외부조인) (교집합 안된 부분도 가져올수 있음)


SELECT COUNT(*) FROM CUSTOM;
SELECT COUNT(*) FROM COMPANY;

--TRANSACTION SQL
-- +가 붙은 반대 컬럼이 기준이됨
SELECT A.USERID,USERNAME,ADDR1,COMPANY,DEPT 
FROM CUSTOM A,COMPANY B
WHERE A.USERID = B.USERID(+)
ORDER BY B.COMPANY DESC;

SELECT A.USERID,USERNAME,ADDR1,COMPANY,DEPT 
FROM CUSTOM A,COMPANY B
WHERE A.USERID(+) = B.USERID
ORDER BY B.COMPANY DESC;

--ANSI SQL
--왼쪽 테이블 기준
SELECT A.USERID,USERNAME,ADDR1,COMPANY,DEPT 
FROM CUSTOM A LEFT OUTER JOIN COMPANY B
ON A.USERID = B.USERID
ORDER BY B.COMPANY DESC;
--오른쪽 테이블 기준
SELECT A.USERID,USERNAME,ADDR1,COMPANY,DEPT 
FROM CUSTOM A RIGHT OUTER JOIN COMPANY B
ON A.USERID = B.USERID
ORDER BY B.COMPANY DESC;

---------------------------------------------------

-- CROSS JOIN(상호조인), 두 테이블 곱하기, 459*464개 데이터 생성

SELECT COUNT(*) FROM CUSTOM; -- 459
SELECT COUNT(*) FROM COMPANY; --464

--TRANSACTION SQL
SELECT A.USERID,USERNAME,ADDR1,COMPANY,DEPT 
FROM CUSTOM A,COMPANY B;

--ANSI SQL
SELECT A.USERID,USERNAME,ADDR1,COMPANY,DEPT 
FROM CUSTOM A CROSS JOIN COMPANY B;

----------------------------------------------------------------

--SELF JOIN : 자기 자신 JOIN
--특정 컬럼에 중복값 확인
SELECT * FROM CUSTOM WHERE ADDR1 = '제주도' ORDER BY USERNAME;

--이름 중복된 제주도 사는 다른 사람 찾기, 동명3인이상은 못참음
SELECT A.* FROM CUSTOM A,CUSTOM B WHERE A.USERNAME = B.USERNAME
AND A.USERID<>B.USERID AND A.ADDR1 ='제주도' AND B.ADDR1 ='제주도';

--동명3인 이상 찾기
SELECT DISTINCT A.* FROM CUSTOM A,CUSTOM B WHERE A.USERNAME = B.USERNAME
AND A.USERID<>B.USERID ORDER BY A.USERNAME;

---------------------------------------------------------------------

--INNER JOIN
SELECT * FROM SALES;
SELECT * FROM CUSTOM;
--파생테이블
SELECT USERID, COUNT(*) CNT, SUM(PRICE) HAP FROM SALES GROUP BY USERID
HAVING COUNT(*) >= 5;

--파생테이블 만들어서 DB의 CUSTOM테이블과 조인
SELECT A.USERID,USERNAME,ADDR1,AGE,CNT,HAP FROM CUSTOM A,
(SELECT USERID, COUNT(*) CNT, SUM(PRICE) HAP FROM SALES GROUP BY USERID
HAVING COUNT(*) >= 5) B
WHERE A.USERID = B.USERID;


--2개 이상의 테이블 조인
SELECT * FROM CUSTOM;
SELECT * FROM COMPANY;
SELECT * FROM POINT;

--TRANSACTION SQL
SELECT A.USERID,USERNAME,COMPANY,DEPT,PRODUCT,LOGIN
FROM CUSTOM A,COMPANY B, POINT C
WHERE A.USERID=B.USERID AND A.USERID=C.USERID;

--ANSI SQL
SELECT A.USERID,USERNAME,COMPANY,DEPT,PRODUCT,LOGIN
FROM CUSTOM A INNER JOIN COMPANY B
ON A.USERID=B.USERID INNER JOIN POINT C
ON A.USERID=C.USERID;

--------------------------------------------------------
/*
A=[1,2,5,6] B=[1,2,4]

A UNION ALL B = [1,2,5,6,1,2,4]
A UNION B = [1,2,4,5,6]
A MINUS B = [5,6]
A INTERSECT B = [1,2]
*/

--UNION
SELECT * FROM CUSTOM
UNION ALL 
SELECT * FROM CUSTOM;

SELECT * FROM CUSTOM
UNION
SELECT * FROM CUSTOM;

SELECT * FROM CUSTOM WHERE ADDR1='제주도';
SELECT * FROM CUSTOM WHERE ADDR1='경기도';
SELECT * FROM CUSTOM WHERE ADDR1='서울특별시';


CREATE TABLE JEJU AS 
SELECT * FROM CUSTOM WHERE ADDR1='제주도';

SELECT * FROM JEJU;

CREATE TABLE GG AS
SELECT * FROM CUSTOM WHERE ADDR1='경기도';

SELECT * FROM GG;

CREATE TABLE SEOUL AS
SELECT * FROM CUSTOM WHERE ADDR1='서울특별시';

SELECT * FROM SEOUL;

SELECT * FROM TAB;

--테이블 구조가 같을때 하나의 테이블로 한번에 불러옴
SELECT * FROM SEOUL
UNION
SELECT * FROM GG
UNION
SELECT * FROM JEJU;

--------------------------------------------------------------

--SUBQUERY(하위쿼리)
--괄호로 묶어야되고 독자적으로 실행했을때 실행 되야됨
SELECT ROUND(AVG(PAY)) FROM COMPANY;

SELECT USERID,COMPANY,DEPT,PAY,(SELECT ROUND(AVG(PAY)) FROM COMPANY) P_AVG FROM COMPANY;

SELECT USERID,COMPANY,DEPT,PAY,(SELECT ROUND(AVG(PAY)) FROM COMPANY) P_AVG,
(PAY - (SELECT ROUND(AVG(PAY)) FROM COMPANY)) 차액 FROM COMPANY;

--평균 나이보다 많은 사람들의 정보를 검색
SELECT AVG(AGE) FROM CUSTOM;

SELECT * FROM CUSTOM WHERE AGE >= (SELECT AVG(AGE) FROM CUSTOM);

--COMPANY에서 평균 월급보다 적은 고객의 정보를 출력
SELECT * FROM COMPANY;
SELECT * FROM CUSTOM;

SELECT ROUND(AVG(PAY)) FROM COMPANY;

SELECT * FROM COMPANY WHERE PAY < (SELECT ROUND(AVG(PAY)) FROM COMPANY);

--현대자동차에 근무하는 고객의 고객정보 검색
SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%';

SELECT * FROM CUSTOM WHERE USERID IN (SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%'); 

--JOIN으로도 됨
SELECT A.* FROM CUSTOM A,COMPANY B 
WHERE A.USERID=B.USERID AND B.COMPANY LIKE '현대자동차%';


--SALES에서 4회이상 상품을 구입한 고객의 고객 정보, 하위쿼리로
SELECT * FROM SALES;
SELECT USERID,COUNT(*) CNT FROM SALES GROUP BY USERID HAVING COUNT(*) >=4;

SELECT * FROM CUSTOM WHERE USERID IN(SELECT USERID FROM SALES GROUP BY USERID HAVING COUNT(*) >=4);

--JOIN
SELECT A.*,CNT FROM CUSTOM A,(SELECT USERID,COUNT(*) CNT FROM SALES GROUP BY USERID HAVING COUNT(*) >=4) B 
WHERE A.USERID = B.USERID;

------------------------------------------------------------------------------------------

--다중행 연산자(ANY,ALL)

--  > ANY : 범위의 최솟값보다 큰 데이터
--  < ANY : 범위의 최댓값보다 작은 데이터
--  > ALL : 범위의 최댓값보다 큰 데이터
--  < ALL : 범위의 최솟값보다 작은 데이터

SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도' ORDER BY POINT;
--MIN : 132
--MAX : 269

-- 범위는 132~269

--ANY 범위값 포함 O
--132보다 큰값
SELECT * FROM CUSTOM WHERE POINT > ANY (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도') ORDER BY POINT;--밑에꺼보다 더 빠름

SELECT * FROM CUSTOM WHERE POINT > (SELECT MIN(POINT) FROM CUSTOM WHERE ADDR1 = '제주도') ORDER BY POINT;

--269보다 작은값
SELECT * FROM CUSTOM WHERE POINT < ANY (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도') ORDER BY POINT;--밑에꺼보다 더 빠름

SELECT * FROM CUSTOM WHERE POINT < (SELECT MAX(POINT) FROM CUSTOM WHERE ADDR1 = '제주도') ORDER BY POINT;

--ALL 범위값 포함 X
SELECT * FROM CUSTOM WHERE POINT < 131;
SELECT * FROM CUSTOM;
UPDATE CUSTOM SET POINT =130 WHERE USERID='gg5595'; -- 고흥환 포인트 재설정
--132보다 작은값
SELECT * FROM CUSTOM WHERE POINT < ALL (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도') ORDER BY POINT;--밑에꺼보다 더 빠름

SELECT * FROM CUSTOM WHERE POINT < (SELECT MIN(POINT) FROM CUSTOM WHERE ADDR1 = '제주도') ORDER BY POINT;

--269보다 큰값
SELECT * FROM CUSTOM WHERE POINT > ALL (SELECT POINT FROM CUSTOM WHERE ADDR1 = '제주도') ORDER BY POINT;--밑에꺼보다 더 빠름

SELECT * FROM CUSTOM WHERE POINT > (SELECT MAX(POINT) FROM CUSTOM WHERE ADDR1 = '제주도') ORDER BY POINT;

---------------------------------------------------------------------------------------------------

-- IN과 =ANY는 같음
SELECT * FROM CUSTOM WHERE USERID 
IN(SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

SELECT * FROM CUSTOM WHERE USERID 
=ANY(SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

-- NOT IN과 <>ALL은 같음
SELECT * FROM CUSTOM WHERE USERID 
NOT IN(SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

SELECT * FROM CUSTOM WHERE USERID 
<>ALL(SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

----------------------------------------------------------------------

--하위쿼리,괄호안의 쿼리 독자적으로 실행 가능

SELECT * FROM CUSTOM WHERE USERID 
IN(SELECT USERID FROM COMPANY WHERE COMPANY LIKE '현대자동차%');

--상관쿼리, 괄호 안의 쿼리 독자적으로 실행 못함
SELECT * FROM CUSTOM WHERE EXISTS
(SELECT * FROM COMPANY WHERE USERID = CUSTOM.USERID
AND COMPANY LIKE '현대자동차%');

---------------------------------------------------------------------

SELECT * FROM CUSTOM WHERE ADDR1='제주도';--같음

SELECT * FROM (SELECT * FROM CUSTOM WHERE ADDR1='제주도') A;--같음


--------------------------------------------------------------------

SELECT * FROM
(SELECT * FROM CUSTOM WHERE ADDR1 = '제주도') A
WHERE AGE > 30;


--PK로 자동정렬
SELECT * FROM JEJU
UNION
SELECT * FROM GG
UNION
SELECT * FROM SEOUL;


----------------------------------------------------------

--PLSQL

create table 사원
(사원번호 number(10),
사원명 varchar2(10),
부서번호 number(2),
직급 varchar2(10),
우편번호 char(7),
주소 varchar2(50),
전화번호 char(15),
급여 number(5),
커미션 number(5),
입사일 date,
성별 char(6),
사수번호 number(10)
);

insert into 사원 values(2001,'이순신',10,'부장','125-365','서울 용산구','02-985-1254',3500,100,'1980-12-01','남자',null);
insert into 사원 values(2002,'홍길동',10,'대리','354-865','서울 강남구','02-865-1254',4000,'','2000-01-25','남자',2004);
insert into 사원 values(2003,'성유리',20,'사원','587-456','부산 해운대구','051-256-9874',2500,100,'2002-05-24','여자',2002);
insert into 사원 values(2004,'옥주현',30,'과장','987-452','서울 강남구','02-33-6589',5000,'','1997-03-22','여자',2001);
insert into 사원 values(2005,'길건',10,'대리','123-322','서울 성동구','02-888-9564',3000,100,'1999-07-15','여자',2004);
insert into 사원 values(2006,'한지혜',20,'사원','154-762','서울 송파구','02-3369-9874',2000,'','2003-05-22','여자',2005);
insert into 사원 values(2007,'박솔미',30,'대리','367-985','서울 영등포구','02-451-2563',3000,100,'2006-01-25','여자',2004);
insert into 사원 values(2008,'이효리',40,'사원','552-126','서울 중구','02-447-3256',2000,'','2001-02-02','여자',2007);

COMMIT;

SELECT * FROM 사원;
DESC 사원;

SELECT * FROM TABS ;

----------------------------------------------------------------------
--함수

SELECT * FROM 사원;
DESC 사원;

SELECT 사원번호,사원명,직급,급여,커미션,F_TAX(2001) TAX FROM 사원 WHERE 사원번호=2001;

SELECT P_OUTEX(2001) FROM 사원;


VARIABLE NAME VARCHAR2(20);
VARIABLE PAY NUMBER;
VARIABLE COMM NUMBER;
EXEC P_OUTEX(2001,:NAME,:PAY,:COMM);
/
SELECT :NAME,:PAY,:COMM FROM DUAL;


COMMIT;



































