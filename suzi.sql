SELECT * FROM SCORE;

--Callablestatement 쓸라고 PROCEDURE 생성

CREATE OR REPLACE PROCEDURE INSERTSCORE
(PHAK SCORE.HAK%TYPE,
PNAME SCORE.NAME%TYPE,
PKOR IN SCORE.KOR%TYPE,
PENG IN SCORE.ENG%TYPE,
PMAT IN SCORE.MAT%TYPE)
IS
BEGIN
INSERT INTO SCORE (HAK,NAME,KOR,ENG,MAT) VALUES (PHAK,PNAME,PKOR,PENG,PMAT);
COMMIT;
END;

EXEC INSERTSCORE('777','박신혜',55,66,77);

SELECT * FROM SCORE;

CREATE OR REPLACE PROCEDURE UPDATESCORE
(PHAK SCORE.HAK%TYPE,
PKOR IN SCORE.KOR%TYPE,
PENG IN SCORE.ENG%TYPE,
PMAT IN SCORE.MAT%TYPE)
IS
BEGIN
UPDATE SCORE SET HAK=PHAK,KOR=PKOR,ENG=PENG,MAT=PMAT WHERE HAK=PHAK;
COMMIT;
END;

EXEC UPDATESCORE('777',66,77,88);


CREATE OR REPLACE PROCEDURE DELETESCORE
(PHAK SCORE.HAK%TYPE)
IS
BEGIN
DELETE SCORE WHERE HAK=PHAK;
COMMIT;
END;

EXEC DELETESCORE('777');

SELECT * FROM SCORE;


CREATE OR REPLACE PROCEDURE SELECTALLSCORE
(PRESULT OUT SYS_REFCURSOR)--PRESULT라는 커서에 담아서 반환해라
IS
BEGIN
OPEN PRESULT FOR --PRESULT를 열어서 FOR 뒤에 있는 쿼리의 데이터를 담아라
SELECT HAK,NAME,KOR,ENG,MAT,(KOR+ENG+MAT) TOT,(KOR+ENG+MAT)/3 AVG,RANK() OVER (ORDER BY (KOR+ENG+MAT) DESC) RANK FROM SCORE 
ORDER BY HAK;
END;


CREATE OR REPLACE PROCEDURE SELECTNAMESCORE
(PRESULT OUT SYS_REFCURSOR,PNAME VARCHAR2)
IS
BEGIN
OPEN PRESULT FOR
SELECT HAK,NAME,KOR,ENG,MAT,(KOR+ENG+MAT) TOT,(KOR+ENG+MAT)/3 AVG,RANK() OVER (ORDER BY (KOR+ENG+MAT) DESC) RANK FROM SCORE 
WHERE NAME LIKE PNAME||'%';
END;


CREATE OR REPLACE PROCEDURE SELECTHAKSCORE
(PRESULT OUT SYS_REFCURSOR,PHAK VARCHAR2)
IS
BEGIN
OPEN PRESULT FOR
SELECT HAK,NAME,KOR,ENG,MAT,(KOR+ENG+MAT) TOT,(KOR+ENG+MAT)/3 AVG FROM SCORE
WHERE HAK = PHAK;
END;

SELECT * FROM USER_PROCEDURES;
SELECT OBJECT_NAME FROM USER_PROCEDURES;

SELECT * FROM SCORE;

commit;








